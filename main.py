import os
import threading
from http.server import HTTPServer, BaseHTTPRequestHandler
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters
)

# –•—Ä–∞–Ω–∏–º, —á—Ç–æ –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥)
user_state = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n"
        "–ù–∞–∂–º–∏ /add, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ –¥–æ—Ö–æ–¥.\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å: /stats"
    )

# /add ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [
            InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥", callback_data="expense"),
            InlineKeyboardButton("üíµ –î–æ—Ö–æ–¥", callback_data="income"),
        ]
    ]
    await update.message.reply_text(
        "–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "income":
        user_state[query.from_user.id] = "income"
        await query.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (‚ÇΩ):")
    elif query.data == "expense":
        user_state[query.from_user.id] = "expense"
        await query.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (‚ÇΩ):")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–ª–∞
async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    state = user_state.get(user_id)

    if not state:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π /add –∏ –≤—ã–±–µ—Ä–∏ —Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ –¥–æ—Ö–æ–¥.")
        return

    try:
        amount = float(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 1200")
        return

    if state == "expense":
        amount = -abs(amount)  # —Ä–∞—Å—Ö–æ–¥ = –º–∏–Ω—É—Å
    else:
        amount = abs(amount)   # –¥–æ—Ö–æ–¥ = –ø–ª—é—Å

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    with open("finance.txt", "a") as f:
        f.write(f"{amount}\n")

    user_state[user_id] = None  # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

    await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {amount} ‚ÇΩ")

# /stats ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("finance.txt", "r") as f:
            nums = [float(x.strip()) for x in f.readlines()]
    except FileNotFoundError:
        nums = []

    total = sum(nums)
    await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {total} ‚ÇΩ")

# –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
def run_bot():
    token = os.environ.get("BOT_TOKEN")
    if not token:
        raise RuntimeError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount))

    app.run_polling()

# –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –≤–µ–±‚Äë—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
class SimpleHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running")

def run_web():
    port = int(os.environ.get("PORT", 10000))  # Render —Å–∞–º –∑–∞–¥–∞—ë—Ç PORT
    server = HTTPServer(("0.0.0.0", port), SimpleHandler)
    server.serve_forever()

if __name__ == "__main__":
    # –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_bot, daemon=True).start()
    # –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –¥–µ—Ä–∂–∏—Ç –≤–µ–±‚Äë—Å–µ—Ä–≤–µ—Ä (–¥–ª—è Render)
    run_web()
