import os
import asyncio
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters,
)

user_state = {}

# ---------- TELEGRAM HANDLERS -----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n"
        "–ù–∞–∂–º–∏ /add, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ –¥–æ—Ö–æ–¥.\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å: /stats"
    )

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥", callback_data="expense"),
        InlineKeyboardButton("üíµ –î–æ—Ö–æ–¥", callback_data="income"),
    ]]
    await update.message.reply_text("–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    if q.data == "income":
        user_state[q.from_user.id] = "income"
        await q.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (‚ÇΩ):")
    else:
        user_state[q.from_user.id] = "expense"
        await q.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (‚ÇΩ):")

async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    state = user_state.get(uid)
    if not state:
        return
    try:
        amount = float(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù—É–∂–Ω–æ —á–∏—Å–ª–æ")
        return

    if state == "expense":
        amount = -abs(amount)

    with open("finance.txt", "a") as f:
        f.write(f"{amount}\n")

    user_state[uid] = None
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {amount} ‚ÇΩ")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("finance.txt") as f:
            nums = [float(x) for x in f]
    except FileNotFoundError:
        nums = []
    await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {sum(nums)} ‚ÇΩ")


# ---------- HEALTHCHECK ----------
async def handle_health(request):
    return web.Response(text="Bot is running ‚úÖ")

async def run_web():
    app = web.Application()
    app.router.add_get("/", handle_health)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.environ.get("PORT", 10000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    print(f"üåç Web server started on port {port}")


# ---------- MAIN ----------
async def main():
    token = os.environ.get("BOT_TOKEN")
    if not token:
        raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    app = Application.builder().token(token).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount))

    # –∑–∞–ø—É—Å–∫–∞–µ–º web-—Å–µ—Ä–≤–µ—Ä (—á—Ç–æ–±—ã Render –≤–∏–¥–µ–ª –ø–æ—Ä—Ç)
    asyncio.create_task(run_web())

    # –∑–∞–ø—É—Å–∫–∞–µ–º telegram polling –≤—Ä—É—á–Ω—É—é
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()


if __name__ == "__main__":
    asyncio.run(main())
