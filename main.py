import os
import threading
from aiohttp import web
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters,
)

user_state = {}

# --- –∫–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤.\n"
        "–ù–∞–∂–º–∏ /add, —á—Ç–æ–±—ã –≤–Ω–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥ –∏–ª–∏ –¥–æ—Ö–æ–¥.\n"
        "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å: /stats"
    )

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[
        InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥", callback_data="expense"),
        InlineKeyboardButton("üíµ –î–æ—Ö–æ–¥", callback_data="income"),
    ]]
    await update.message.reply_text("–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))

# --- —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ ---
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()   # <-- –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏–Ω–∞—á–µ Telegram "–¥—É–º–∞–µ—Ç", —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!

    if query.data == "income":
        user_state[query.from_user.id] = "income"
        await query.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ (‚ÇΩ):")
    elif query.data == "expense":
        user_state[query.from_user.id] = "expense"
        await query.message.reply_text("–í–≤–µ–¥–∏ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (‚ÇΩ):")

# --- –≤–≤–æ–¥ —Å—É–º–º—ã ---
async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.message.from_user.id
    state = user_state.get(uid)

    if not state:
        return  # –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–∂–∞—Ç–∞

    try:
        amount = float(update.message.text)
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ù—É–∂–Ω–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1200")
        return

    if state == "expense":
        amount = -abs(amount)  # —Ä–∞—Å—Ö–æ–¥ –º–∏–Ω—É—Å
    else:
        amount = abs(amount)   # –¥–æ—Ö–æ–¥ –ø–ª—é—Å

    with open("finance.txt", "a") as f:
        f.write(f"{amount}\n")

    user_state[uid] = None
    await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount} ‚ÇΩ")

# --- –±–∞–ª–∞–Ω—Å ---
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open("finance.txt") as f:
            nums = [float(x.strip()) for x in f.readlines()]
    except FileNotFoundError:
        nums = []

    total = sum(nums)
    await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {total} ‚ÇΩ")

# --- HTTP-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render ---
async def handle_health(request):
    return web.Response(text="Bot is running")

def run_web():
    app = web.Application()
    app.router.add_get("/", handle_health)
    port = int(os.environ.get("PORT", 10000))
    web.run_app(app, host="0.0.0.0", port=port)

# --- Main ---
def main():
    token = os.environ.get("BOT_TOKEN")
    if not token:
        raise RuntimeError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")

    tg_app = Application.builder().token(token).build()
    tg_app.add_handler(CommandHandler("start", start))
    tg_app.add_handler(CommandHandler("add", add))
    tg_app.add_handler(CommandHandler("stats", stats))
    tg_app.add_handler(CallbackQueryHandler(button))   # <-- –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ!
    tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount))

    # aiohttp –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –±–æ—Ç –≤ —Ñ–æ–Ω–µ
    threading.Thread(target=tg_app.run_polling, daemon=True).start()
    run_web()

if __name__ == "__main__":
    main()
